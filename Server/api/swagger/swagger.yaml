swagger: "2.0"
info:
  version: "1.0.0"
  title: ServU

host: 127.0.0.1:3000
# basePath prefixes all resource paths
basePath: /api
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
  #ajouter xml si on a le temps
# format of the responses to the client (Accepts)
produces:
  - application/json
  #idem xml

parameters:
  username:
    name: username
    description: "Name of the user"
    in: path
    type: string
    required: true

  friendusername:
    name: friendusername
    description: "Name of the user"
    in: path
    type: string
    required: true



paths:
# ######################
#     API USER SIDE
# ######################

  /users:
    x-swagger-router-controller: users
    post:
      operationId: postUsers
      description: Add a new user
      parameters:
        - name: user
          in: body
          description: User's informations
          required: true
          schema:
            $ref: "#/definitions/user_post"
      responses:
        "201":
          description: Success
        "400":
          description: Wrong format
        "409":
          description: Another user has the same username

  /users/{username}:
    x-swagger-router-controller: users
    get:
      operationId: getUsersUsername
      description: Returns a user
      parameters:
      - $ref: "#/parameters/username"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/user"
        "404":
          description: User not found
    put:
      operationId: putUsersUsername
      description: Update a user
      parameters:
        - $ref: "#/parameters/username"
        - name: user
          in: body
          description: User's informations
          required: true
          schema:
              $ref: "#/definitions/user_put"
      responses:
        "204":
          description: Success
        "400":
          description: Wrong format
        "404":
          description: User not found
        "409":
          description: Another user has the same pseudo
    delete:
      operationId: deleteUsersUsername
      description: Delete a user
      parameters:
        - $ref: "#/parameters/username"
      responses:
        "204":
          description: Success
        "404":
          description: User not found


  /users/{username}/friends:
    x-swagger-router-controller: users
    get:
      operationId: getUsersFriends
      description: Returns all friends attached to the user
      parameters:
        - $ref: "#/parameters/username"
      responses:
        "200":
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/friend"
        "404":
          description: "This user does not exist or has no friends"
    post:
      operationId: postUsersFriends
      description: "Add a friend"
      parameters:
      - $ref: "#/parameters/username"
      - name: friend
        description: "friend to add"
        in: body
        schema:
          $ref: "#/definitions/friend"
        required: true
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/friend"
        "400":
          description: Wrong format
        "404":
          description: User not found
          
  /users/{username}/friendsRequest:
    x-swagger-router-controller: users
    get:
      operationId: getUsersFriendsRequest
      description: Returns all friends attached to the user
      parameters:
        - $ref: "#/parameters/username"
      responses:
        "200":
          description: "Success"
          schema:
            type: array
            items:
              $ref: "#/definitions/friend"
        "404":
          description: "This user does not exist or has no friends"
    post:
      operationId: postUsersFriendsRequest
      description: "Add a friend"
      parameters:
      - $ref: "#/parameters/username"
      - name: friend
        description: "friend to add"
        in: body
        schema:
          $ref: "#/definitions/friend"
        required: true
      responses:
        "201":
          description: Success
          schema:
            $ref: "#/definitions/friend"
        "400":
          description: Wrong format
        "404":
          description: User not found

  /users/{username}/friends/{friendusername}:
    x-swagger-router-controller: users
    get:
      operationId: getUsersFriendsUser
      description: Returns informations about the friend
      parameters:
        - $ref: "#/parameters/username"
        - $ref: "#/parameters/friendusername"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/friend"
        "404":
          description: User or friend not found
    delete:
      description: Delete a friend
      parameters:
        - $ref: "#/parameters/username"
        - $ref: "#/parameters/friendusername"
      responses:
        "204":
          description: Success
        "404":
          description: User or friend not found

  /users/{username}/friends/{friendusername}/positions:
    x-swagger-router-controller: users
    get:
      operationId: getUsersFriendsUserPositions
      description: Returns the position of the friend
      parameters:
        - $ref: "#/parameters/username"
        - $ref: "#/parameters/friendusername"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/position"
        "404":
          description: User or friend not found

# complex objects have schema definitions

definitions:
  user:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      friends:
        type: array
        items: 
          $ref: '#/definitions/friend'
      friendsRequest:
        type: array
        items: 
          $ref: '#/definitions/friend'
      positions:
        type: array
        items: 
          $ref: '#/definitions/position'

  user_post:
    type: object
    required:
      - username
      - email
      - password

    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
        format: password


  user_put:
    type: object
    properties:
      username:
        type: string
      email:
        type: string
      password:
        type: string
        format: password

  friend:
    type: object
    required:
      - username
    properties:
      username:
        type: string


  position:
    type: object
    required:
      - x
      - y
      - z
    properties:
      x:
        type: integer
      y:
        type: integer
      z:
        type: integer
      date :
        type: integer
